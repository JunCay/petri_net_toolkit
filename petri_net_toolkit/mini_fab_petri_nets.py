from .elements import *
from .petri_nets import *
from .colored_petri_nets import *

class Sorter2p_Colored(ColoredPetriNet):
    def __init__(self, name):
        super().__init__(name)
        p1 = Place('p1', note='LP1')
        p2 = Place('p2', note='J1 Free', type='lock')
        p3 = Place('p3', note='J21 Free', type='lock')
        p4 = Place('p4', note='J22 Free', type='lock')
        p5 = Place('p5', note='Wafer waiting', type='lock')
        p6 = Place('p6', note='J1-LP1 Ready', type='lock')
        p7 = Place('p7', note='J1-SA Ready', type='lock')
        p8 = Place('p8', note='J1-LP2 Ready', type='lock')      # p9 is left by mistake :(
        p10= Place('p10', note='J21-LP1 Ready', type='lock')
        p11= Place('p11', note='J21-SA Ready', type='lock')
        p12= Place('p12', note='J21-LP2 Ready', type='lock')
        p13= Place('p13', note='J22-LP1 Ready', type='lock')
        p14= Place('p14', note='J22-SA Ready', type='lock')
        p15= Place('p15', note='J22-LP2 Ready', type='lock')
        p16= Place('p16', note='LoA Free', type='lock')
        p17= Place('p17', note='Wafer on LoA', type='lock')
        p18= Place('p18', note='SA Free', type='lock')
        p19= Place('p19', note='Wafer on SA', type='lock')
        p20= Place('p20', note='Wafer Waiting', type='lock')
        p21= Place('p21', note='UpA Free', type='lock')
        p22= Place('p22', note='Wafer on UpA', type='lock')
        p23= Place('p23', note='LP2')
        p24= Place('p24', note='LP1L')
        
        t1 =Transition('t1', note='Wafer Select', reward=1)
        t2 =Transition('t2', note='J1-LP1 Move', type='stochastic', dist_type='gaussian', mu=10, sigma=0.3, reward=1)
        t3 =Transition('t3', note='J1-SA Move', type='stochastic', dist_type='gaussian', mu=10, sigma=0.3, reward=1)
        t4 =Transition('t4', note='J1-LP2 Move', type='stochastic', dist_type='gaussian', mu=10, sigma=0.3, reward=1)
        t5 =Transition('t5', note='J21-LP1 Move', type='stochastic', dist_type='gaussian', mu=5, sigma=0.3, reward=1)
        t6 =Transition('t6', note='J21-SA Move', type='stochastic', dist_type='gaussian', mu=5, sigma=0.3, reward=1)
        t7 =Transition('t7', note='J21-LP2 Move', type='stochastic', dist_type='gaussian', mu=5, sigma=0.3, reward=1)
        t8 =Transition('t8', note='J22-LP1 Move', type='stochastic', dist_type='gaussian', mu=5, sigma=0.3, reward=1)
        t9 =Transition('t9', note='J22-SA Move', type='stochastic', dist_type='gaussian', mu=5, sigma=0.3, reward=1)
        t10=Transition('t10', note='J22-LP2 Move', type='stochastic', dist_type='gaussian', mu=5, sigma=0.3, reward=1)
        t11=Transition('t11', note='Pick Wafer from LP1', type='timed', time=1, mu=1, reward=5)
        t12=Transition('t12', note='Put Wafer to SA', type='timed', time=1, mu=1, reward=5)
        t13=Transition('t13', note='Wafer Detect', type='stochastic', mu=6, sigma=0.3, reward=10, cv=0.1)
        t14=Transition('t14', note='Pick Wafer from SA', type='timed', time=1, mu=1, reward=5, pass_type='all')
        t15=Transition('t15', note='Put Wafer to LP2', type='timed', time=1, mu=1, reward=20)
        t16=Transition('t16', note='Put Wafer to LP1L', type='timed', in_token_type='default_error', time=1, mu=1, reward=-100)
        
        self.add(p1)
        self.add(p2)
        self.add(p3)
        self.add(p4)
        self.add(p5)
        self.add(p6)
        self.add(p7)
        self.add(p8)
        self.add(p10)
        self.add(p11)
        self.add(p12)
        self.add(p13)
        self.add(p14)
        self.add(p15)
        self.add(p16)
        self.add(p17)
        self.add(p18)
        self.add(p19)
        self.add(p20)
        self.add(p21)
        self.add(p22)
        self.add(p23)
        self.add(p24)
        
        self.add(t1)
        self.add(t2)
        self.add(t3)
        self.add(t4)
        self.add(t5)
        self.add(t6)
        self.add(t7)
        self.add(t8)
        self.add(t9)
        self.add(t10)
        self.add(t11)
        self.add(t12)
        self.add(t13)
        self.add(t14)
        self.add(t15)
        self.add(t16)
        
        self.link(p1, t1)
        self.link(t1, p5)
        self.link(p2, t2)
        self.link(t2, p6)
        self.link(p2, t3)
        self.link(t3, p7)
        self.link(p2, t4)
        self.link(t4, p8)
        self.link(p3, t5)
        self.link(t5, p10)
        self.link(p3, t6)
        self.link(t6, p11)
        self.link(p3, t7)
        self.link(t7, p12)
        self.link(p4, t8)
        self.link(t8, p13)
        self.link(p4, t9)
        self.link(t9, p14)
        self.link(p4, t10)
        self.link(t10, p15)
        self.link(p5, t11)
        self.link(p6, t11)
        self.link(p10, t11)
        self.link(p16, t11)
        self.link(t11, p2)
        self.link(t11, p3)
        self.link(t11, p17)
        self.link(p7, t12)
        self.link(p11, t12)
        self.link(p17, t12)
        self.link(p18, t12)
        self.link(t12, p2)
        self.link(t12, p3)
        self.link(t12, p16)
        self.link(t12, p19)
        self.link(p19, t13)
        self.link(t13, p20)
        self.link(p7, t14)
        self.link(p14, t14)
        self.link(p20, t14)
        self.link(p21, t14)
        self.link(t14, p3)
        self.link(t14, p4)
        self.link(t14, p18)
        self.link(t14, p22)
        self.link(p12, t15)
        self.link(p15, t15)
        self.link(p22, t15)
        self.link(t15, p3)
        self.link(t15, p4)
        self.link(t15, p21)
        self.link(t15, p23)
        self.link(p10, t16)
        self.link(p13, t16)
        self.link(p22, t16)
        self.link(t16, p3)
        self.link(t16, p4)
        self.link(t16, p21)
        self.link(t16, p24)
        
        init_dict = dict()
        for i in range(len(self.places)):
            if i!=8:
                init_dict['p'+str(i+1)] = {'default': 0, 'default_error':0}
        init_dict['p24'] = {'default': 0, 'default_error':0}
        init_dict['p1']['default'] = 30
        init_dict['p2']['default'] = 1
        init_dict['p3']['default'] = 1
        init_dict['p4']['default'] = 1
        init_dict['p16']['default'] = 1
        init_dict['p18']['default'] = 1
        init_dict['p21']['default'] = 1
        print(init_dict)
        
        self.define_initial(initial_dict=init_dict)
        self.set_invalid_fire_penalty(-2)
        self.reset()
        self.initialize_net()
        
        
        
class Sorter2p_Colored_Simple(ColoredPetriNet):
    def __init__(self, name):
        super().__init__(name)
        p1 = Place('p1', note='LP1')
        p5 = Place('p5', note='Wafer waiting', type='lock')
        p16= Place('p16', note='LoA Free', type='lock', activity_type='resource')
        p17= Place('p17', note='Wafer on LoA', type='lock')
        p18= Place('p18', note='SA Free', type='lock', activity_type='resource')
        p19= Place('p19', note='Wafer on SA', type='lock')
        p20= Place('p20', note='Wafer Waiting', type='lock')
        p21= Place('p21', note='UpA Free', type='lock', activity_type='resource')
        p22= Place('p22', note='Wafer on UpA', type='lock')
        p23= Place('p23', note='LP2')
        p24= Place('p24', note='LP1L')
        
        t1 =Transition('t1', note='Wafer Select', reward=1)
        t11=Transition('t11', note='Pick Wafer from LP1', type='timed', time=1, mu=1, reward=5)
        t12=Transition('t12', note='Put Wafer to SA', type='timed', time=1, mu=1, reward=5)
        t13=Transition('t13', note='Wafer Detect', type='stochastic', mu=6, sigma=0.3, reward=10, cv=0.6)
        t14=Transition('t14', note='Pick Wafer from SA', type='timed', time=1, mu=1, reward=5, pass_type='all')
        t15=Transition('t15', note='Put Wafer to LP2', type='timed', time=1, mu=1, reward=20)
        t16=Transition('t16', note='Put Wafer to LP1L', type='timed', time=1, mu=1, reward=-100)
          
        self.add(p1)
        self.add(p5)
        self.add(p16)
        self.add(p17)
        self.add(p18)
        self.add(p19)
        self.add(p20)
        self.add(p21)
        self.add(p22)
        self.add(p23)
        self.add(p24)
        
        self.add(t1)
        self.add(t11)
        self.add(t12)
        self.add(t13)
        self.add(t14)
        self.add(t15)
        self.add(t16)
        
        self.link(p1, t1)
        self.link(t1, p5)
        self.link(p16, t11)
        self.link(p5, t11)
        self.link(t11, p17)
        self.link(p17, t12)
        self.link(p18, t12)
        self.link(t12, p16)
        self.link(t12, p19)
        self.link(p19, t13)
        self.link(t13, p20)
        self.link(p20, t14)
        self.link(p21, t14)
        self.link(t14, p18)
        self.link(t14, p22)
        self.link(p22, t15)
        self.link(t15, p21)
        self.link(t15, p23)
        self.link(p22, t16)
        self.link(t16, p21)
        self.link(t16, p24)
        
        init_dict = dict()
        keys = ['p1', 'p5', 'p16', 'p17' ,'p18' ,'p19' ,'p20' ,'p21' ,'p22' ,'p23' ,'p24']
        values = [30 ,0 ,1 ,0 ,1 ,0 ,0 ,1 ,0 ,0 ,0]
        for i, key in enumerate(keys):
            init_dict[key] = {'default': values[i], 'default_error':0}
        print(init_dict)
        
        self.define_initial(initial_dict=init_dict)
        self.set_invalid_fire_penalty(-2)
        self.reset()
        self.initialize_net()